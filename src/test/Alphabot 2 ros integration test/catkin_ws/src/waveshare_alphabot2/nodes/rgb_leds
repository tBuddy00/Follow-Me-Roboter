#!/usr/bin/env python

import rospy
from std_msgs.msg import String

import RPi.GPIO as GPIO
import time

import requests

from waveshare_alphabot2.msg import RGB_LED

class led_driver:
    server_address = "http://localhost/"        
    server_port = "2812"

    def __init__(self):
        rospy.init_node("rgb_leds_driver")
        rospy.loginfo("Node 'rgb_leds' configuring driver.")

        self.rate = rospy.Rate(rospy.get_param('~rate', 10))
        self.server_address = rospy.get_param('~server_address')
        self.server_port = rospy.get_param('~server_port')

        # Setup subscriber for rgb_led message
        rospy.Subscriber('rgb_leds', RGB_LED, self.rgbled_callback)

        rospy.loginfo("Node 'rgb_leds' configuration complete.")

    def run(self):
        rospy.loginfo("Node 'rgb_leds' running.")
        while not rospy.is_shutdown():
            self.rate.sleep()

    def rgbled_callback(self, message):
        rospy.loginfo("Node 'rgb_leds' RGB_DATA Received")
        rospy.loginfo("    RGB_LED_DATA: function: "+str(message.function)+", color: "+str(message.color) \
            +", LED 1 color: "+str(message.led1_color) \
            +", LED 2 color: "+str(message.led2_color) \
            +", LED 3 color: "+str(message.led3_color) \
            +", LED 4 color: "+str(message.led4_color) \
            +", delay: "+str(message.delay))

        # Create command for service here and call RGB LED Service
        if message.function.lower().strip() == "setled":
            url = self.server_address+":"+str(self.server_port)+"/setLED/"+message.led1_color+"/"+message.led2_color+"/"+message.led3_color+"/"+message.led4_color+"/"
        elif message.function.lower().strip() == "setallred":
            url = self.server_address+":"+str(self.server_port)+"/setAllRed/"
        elif message.function.lower().strip() == "setallgreen":
            url = self.server_address+":"+str(self.server_port)+"/setAllGreen/"
        elif message.function.lower().strip() == "setallblue":
            url = self.server_address+":"+str(self.server_port)+"/setAllBlue/"
        elif message.function.lower().strip() == "rainbow":
            url = self.server_address+":"+str(self.server_port)+"/setMode/rainbow/"+str(message.delay)+"/"
        elif message.function.lower().strip() == "theaterchaserainbow":
            url = self.server_address+":"+str(self.server_port)+"/setMode/theaterChaseRainbow/"+str(message.delay)+"/"
        elif message.function.lower().strip() == "colorwipe" and message.delay > 0:
            url = self.server_address+":"+str(self.server_port)+"/setMode/colorWipe/"+message.color+"/"+str(message.delay)+"/"
        elif message.function.lower().strip() == "colorwipe" and message.delay <= 0:
            url = self.server_address+":"+str(self.server_port)+"/setMode/colorWipe/"+message.color+"/0/"
        elif message.function.lower().strip() == "theaterchase" and message.delay > 0:
            url = self.server_address+":"+str(self.server_port)+"/setMode/theaterChase/"+message.color+"/"+str(message.delay)+"/"
        elif message.function.lower().strip() == "theaterchase" and message.delay <= 0:
            url = self.server_address+":"+str(self.server_port)+"/setMode/theaterChase/"+message.color+"/0/"
        elif message.function.lower().strip() == "delay" and message.delay > 0:
            url = self.server_address+":"+str(self.server_port)+"/setDelay/"+str(message.delay)+"/"
        else:
            url = self.server_address+":"+str(self.server_port)+"/"

        rospy.loginfo("Node 'rgb_leds' Request: "+url)
        
        response = requests.put(url)

        rospy.loginfo("Node 'rgb_leds' Response: "+str(response.status_code))

def main():
    rospy.loginfo("Starting node 'rgb_leds'")
    driver = led_driver()
    driver.run()
    rospy.loginfo("Node 'rgb_leds' Stopped")

if __name__ == '__main__':
    main()
